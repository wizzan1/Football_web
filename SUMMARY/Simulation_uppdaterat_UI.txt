Complete Project Architecture & File Breakdown
Directory Structure
Generated code
textfootball_game_web/
├── app/
│   ├── __init__.py
│   ├── match_sim.py
│   ├── models.py
│   ├── routes_auth.py
│   ├── routes_game.py
│   ├── database.db
│   └── templates/
│       ├── base.html
│       ├── coming_soon.html
│       ├── compose.html
│       ├── create_team.html
│       ├── dashboard.html
│       ├── index.html
│       ├── login.html
│       ├── mailbox.html
│       ├── match_result.html
│       ├── player_page.html
│       ├── register.html
│       ├── search.html
│       ├── simulate.html
│       ├── team_page.html
│       ├── user_profile.html
│       └── view_mail.html
├── .gitignore
├── README.md
├── requirements.txt
└── run.py
Use code with caution.
File Breakdown
run.py: The main entry point to start the application. It imports the create_app factory from the app package and runs the resulting Flask application.
app/: The primary Python package containing all core application logic, models, routes, and templates.
app/__init__.py: The application factory. This file contains the create_app() function which initializes the Flask application, configures the secret key and the SQLAlchemy database URI, initializes the database object (db), and registers all the route blueprints (auth_bp, game_bp). It also includes a context processor to inject the user's currently selected team into all templates, allowing the navigation bar to display persistent team context.
app/match_sim.py: The core simulation engine for the entire game, operating in two distinct modes.
Analytical Mode (get_prematch_odds): This function is a high-speed Monte Carlo analysis tool. It runs hundreds of lightweight simulations (with detailed text logging disabled for maximum performance) to calculate win/draw/loss probabilities. It generates a comprehensive report for both home and away fixtures, including average goals scored/conceded and a full breakdown of each team's stats with and without the home-field advantage.
Story-Telling Mode (simulate_match): This function runs a single, detailed match simulation with full event logging enabled. It generates a rich, step-by-step log of the match, including explicit calculations for how home advantage boosts zonal strengths (Base → Boosted). This detailed log is designed to be displayed on the match result page.
MatchTeam Class: A helper class that prepares a team for a match by selecting the starting 11 and calculating all key metrics: average base skill, average team shape, average effective skill, and the final zonal strengths (GK, DEF, MID, FWD) that power the simulation.
Tunable Constants: Contains key game-balance parameters like HOME_ADVANTAGE_BOOST (currently 3%) and GOAL_CONVERSION_FACTOR.
app/models.py: Defines the database schema using SQLAlchemy ORM classes.
User: Stores user account information, including username and hashed password. It has one-to-many relationships with Team and Message.
Team: Stores information for a football team, including its name and country, and links back to its owner (User). It has a one-to-many relationship with Player.
Player: Stores all attributes for an individual player, such as name, age, position, skill, and shape. It contains the crucial effective_skill property (skill * (shape / 100)), which is the foundational metric used to calculate all team strengths in the simulation.
Message: Stores private messages between users, with fields for sender, recipient, subject, and body. It also contains flags and IDs for handling challenges.
app/routes_auth.py: A Flask Blueprint dedicated to handling all user authentication. It manages the routes for /register, /login, and /logout, interacting with the User model and Flask's session management.
app/routes_game.py: The main Flask Blueprint for all core gameplay features and URLs.
/dashboard: The primary user dashboard, listing their managed teams and providing the main navigation point to other features like the simulation analysis page.
/team/<id>: The team management page. It displays the full squad list and, crucially, sets the selected_team_id in the user's session when they visit, making that team active for analysis.
/player/<id>: Displays the detailed attribute page for a single player.
/simulate: Renders the simulate.html template, which acts as the Pre-Match Analysis Dashboard. Before rendering, this route calls get_prematch_odds() from the simulation engine to generate a full statistical report comparing the user's selected team against all available opponents.
/challenge/<id>: This route is triggered by the "Challenge" button. It takes the number of simulations to run as input and calls the simulate_match() function (the story-telling version) for each, then renders the detailed results on the match_result.html page.
/mailbox, /mail/<id>, /compose, etc.: A full suite of routes to handle the in-game messaging and challenge system.
app/database.db: The SQLite database file. This file stores all persistent data for users, teams, players, and messages.
app/templates/: The directory containing all user-facing Jinja2 HTML templates.
base.html: The master site template. It provides the overall page structure, includes CSS and JS assets (like Bootstrap), and contains the main navigation bar which dynamically displays the user's selected team. All other pages extend this template.
simulate.html: The template for the Pre-Match Analysis Dashboard. It features a tabbed interface to show separate analyses for Home and Away fixtures. Inside each tab, it renders a dynamic "Tale of the Tape" table showing a full comparison of both teams, including the explicit Base → Boosted calculation for the home team's stats. It also displays the win/draw/loss probabilities from the Monte Carlo analysis in a clear progress bar with a legend. It contains the form to initiate a story-mode "Challenge".
match_result.html: The template for displaying the results of a story-mode simulation. It uses an accordion to handle multiple match results and employs JavaScript to create a "live" timeline reveal of the detailed event log.
team_page.html: The team management hub. Displays a sortable list of all players on a team and allows the user to select that team as their active team for analysis.
dashboard.html: The user's main landing page after login, showing a list of their created teams and providing links to manage them or enter the simulation analysis.
player_page.html: A simple page showing the attributes of a single selected player.
mailbox.html, view_mail.html, compose.html: Templates providing a full-featured private messaging and challenge system interface.
login.html, register.html: Forms for user authentication.
create_team.html: Form for creating a new team.
search.html, user_profile.html: Pages for searching for other users/teams and viewing public user profiles.
coming_soon.html: A placeholder for future features.
requirements.txt: A text file listing all the Python package dependencies required to run the project (e.g., Flask, Flask-SQLAlchemy).