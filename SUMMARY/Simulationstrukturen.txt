
Directory Structure
textfootball_game_web/
├── app/
│   ├── __init__.py
│   ├── match_sim.py
│   ├── models.py
│   ├── routes_auth.py
│   ├── routes_game.py
│   ├── database.db
│   └── templates/
│       ├── base.html
│       ├── coming_soon.html
│       ├── compose.html
│       ├── create_team.html
│       ├── dashboard.html
│       ├── index.html
│       ├── login.html
│       ├── mailbox.html
│       ├── match_result.html
│       ├── player_page.html
│       ├── register.html
│       ├── search.html
│       ├── simulate.html
│       ├── team_page.html
│       ├── user_profile.html
│       └── view_mail.html
├── .gitignore
├── README.md
├── requirements.txt
└── run.py
File Breakdown

run.py: The main entry point to start the application. It imports and runs the app created by the app factory.
app/: The main Python package containing all core application code.
app/init.py: The app factory (create_app) that initializes Flask, configures the secret key and database URI, initializes the SQLAlchemy db object, registers the route blueprints, and includes a context processor to inject the selected_team into templates for displaying active team context in the navigation bar. Also defines a custom Jinja filter (nl2br) to convert newlines to HTML line breaks in message bodies.
app/match_sim.py: Contains the logic for simulating matches between two teams. Includes the simulate_match function, which randomly selects 11 players from each team (or all if fewer), calculates average skills, runs a chunked 90-minute simulation with possession, shots, and goal events based on skill-weighted probabilities plus randomness, and generates a log of events for display. Tuned for realistic outcomes (~2-3 total goals average, ~10-15% draws in even matches) using adjusted shot frequency, variance, and thresholds.
app/models.py: Defines the database schema using SQLAlchemy ORM classes.

User: Stores user accounts with hashed passwords. Has a one-to-many relationship with Team, sent_messages, and received_messages.
Team: Stores team information and is linked to a User. Has a one-to-many relationship with Player. Includes nullable fields for league, division, and season (defaults to None, as teams do not start in a league).
Player: Stores player attributes (name, age, skill, etc.) and is linked to a Team.
Message: Stores private messages between users, including fields for sender, recipient, subject, body, timestamp, read status, and challenge-specific details (is_challenge flag, challenger_team_id, challenged_team_id, is_accepted flag).


app/routes_auth.py: A Flask Blueprint for authentication. It handles all logic for /register, /login, and /logout routes, interacting with the User model and Flask's session. Successful registration automatically logs in the user and redirects to the dashboard.
app/routes_game.py: A Flask Blueprint for core gameplay. It handles routes for the main homepage (/), the user dashboard (/dashboard with Simulate button to list enemies), team creation (/create-team), team deletion, viewing a specific team (/team/<id>), viewing a specific player (/player/<id>), a placeholder for upcoming features (/coming-soon), searching users and teams (/search), viewing a user profile (/user/<username>), challenging a team to a friendly match (/challenge/<id> with immediate multi-sim for testing), viewing the mailbox (/mailbox), viewing a message (/mail/<id>), accepting a challenge (/accept_challenge/<id> with simulation), composing a new message (/compose), deleting a message (/delete_mail/<id>), sending messages from profiles, and listing enemies for simulation (/simulate). The /team/<id> route sets the selected team in the session for owned teams and includes custom player sorting. Team and player views are public but hide management elements for non-owners. Includes logic for generating a starter squad during team creation. Challenges trigger immediate simulations (single or multiple) for testing, displaying results with timelines.</id></id></id></id></id></username></id></id>
app/database.db: The SQLite database file where all user, team, player, and message data is stored.
app/templates/: Contains all user-facing HTML files.

base.html: The main site template, which all other pages inherit from. It includes Bootstrap, Bootstrap Icons, a navigation bar with links to Dashboard and Mailbox, a search form for users/teams, and displays the selected team's details (if any) using badges for league/division/season. Features a background image.
coming_soon.html: A simple placeholder page for features under development (e.g., Matches, League, Tactics).
compose.html: Form for composing and sending a new message, with fields for recipient username, subject, and body.
create_team.html: Form for creating a new team, selecting name and country.
dashboard.html: The user's main dashboard, listing their teams with "Manage Team" and "Delete" options. Displays team details using badges for league/division/season. Includes a "Simulate Enemies" button to access the enemy list for testing simulations.
index.html: The landing page for unauthenticated users (likely with login/register links).
login.html: Form for user login.
mailbox.html: Professional mailbox interface with tabs for Inbox and Sent, listing messages with subjects, senders/recipients, timestamps, and delete buttons. Unread messages are highlighted. Includes a "Compose New" button.
match_result.html: Displays match simulation results, supporting multiple sims in an accordion (collapsible headers for each sim). Each section shows a timeline log with timed JS reveal (events appended every ~8s for ~2-min pacing), color-coded and blinking for goals/misses. Handles prematch info and final scores.
player_page.html: Detail view for an individual player, showing attributes in a definition list.
register.html: Form for user registration.
search.html: Displays search results for users and teams, with links to profiles and team pages.
simulate.html: Lists available enemy teams with prematch info (average skill/shape and expected outcomes). Includes a form to select number of sims (1-10) and "Challenge" button to trigger immediate multi-sim.
team_page.html: The team management hub, featuring a sub-navigation tab bar (Squad, Matches, etc., with non-Squad tabs linking to coming-soon if owned). Shows the sorted squad list in a table with links to player pages. Includes a "Challenge to Friendly Match" button for non-owned teams (requires a selected team). Management tabs are hidden for non-owners.
user_profile.html: Displays a user's profile, listing their teams with links to team pages and badges for league/division/season. Includes a form to send a message to the user if not viewing your own profile.
view_mail.html: Detail view for a single message, showing sender, recipient, date, body (with newlines converted to breaks), and a delete button. For challenges, includes an "Accept Challenge" button if pending and you're the recipient.


requirements.txt: Lists all the Python packages the project depends on (e.g., Flask, Flask-SQLAlchemy).

How to Run

Install dependencies: pip install -r requirements.txt
Create the database: flask shell, then run from app import db, models and db.create_all().
Start the server: python run.py.

GitHub:
https://github.com/wizzan1/Football_web